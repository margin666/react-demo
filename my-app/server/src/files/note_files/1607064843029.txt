判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。

示例 1:

输入: 121
输出: true
示例 2:

输入: -121
输出: false
解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。
示例 3:

输入: 10
输出: false
解释: 从右向左读, 为 01 。因此它不是一个回文数。
进阶:

你能不将整数转为字符串来解决这个问题吗？


const fn = x => {
	const old = x
	if(x<0) return false
	if(x%10 === 0 || x!= 0) return false
	let result = 0
	while(x!=0){
		let pop = x%10
		result = result*10+pop
		x = parseInt(x/10)
	}
	return result == old
}

console.log(fn(151))//true
console.log(fn(-151))//false
console.log(fn(1510))//false
console.log(fn(15121354))//false



进阶   while循环里面，比较原来的数字后半部分反转等于前半部分，就是回文   121

const fn = x => {
	const old = x
	if(x<0) return false
	if(x%10 === 0 && x!=0) return false
	let result = 0
	while(x>result){
		let pop = x%10
		result = result*10+pop
		x = parseInt(x/10)
	}
	return result == x|| parseInt(result/10) == x
}
console.log(fn(1512))



12321      x=12  result 123      这种情况就是位数为奇数，将result最后一位数去除掉

parseInt(result/10) == x     判断





















